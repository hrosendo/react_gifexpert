{"version":3,"sources":["Components/AddCategory.js","helpers/getGifs.js","Components/GifGridItem.js","Components/GrifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GrifGrid","loading","state","setState","useEffect","then","useFetchGifs","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"mMAIaA,EAAc,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAAmB,EACRC,qBADQ,mBACrCC,EADqC,KACzBC,EADyB,KAe5C,OACI,sBAAMC,SATW,SAACC,GAClBA,EAAEC,iBAECJ,EAAWK,OAAOC,OAAO,IACxBR,GAAc,SAAAS,GAAI,OAAKP,GAAL,mBAAmBO,OACrCN,EAAc,MAIlB,SACI,uBACIO,KAAK,OACLC,MAAST,EACTU,SAjBc,SAACP,GAEvBF,EAAcE,EAAEQ,OAAOF,a,+BCTlBG,EAAO,uCAAG,WAAMC,GAAN,uBAAAC,EAAA,6DACbC,EADa,iDACmCC,UAAUH,GAD7C,+DAEAI,MAAMF,GAFN,cAEbG,EAFa,gBAGEA,EAAKC,OAHP,uBAGZC,EAHY,EAGZA,KACDC,EAAOD,EAAKE,KAAI,SAAAC,GAAO,IAAD,EACxB,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QARvB,kBAaZM,GAbY,4CAAH,sDCEPO,EAAc,SAAC,GAAiB,IAAhBH,EAAe,EAAfA,MAAMV,EAAS,EAATA,IAE/B,OACI,sBAAKc,UAAU,yCAAf,UACI,qBAAKC,IAAKf,EAAKgB,IAAKN,IACpB,4BAAIA,QCFHO,EAAW,SAAC,GAAgB,IAAfnB,EAAc,EAAdA,SAAc,ECFZ,SAACA,GAAc,IAAD,EACZd,mBAAS,CAC/BqB,KAAM,GACNa,SAAS,IAHyB,mBAC/BC,EAD+B,KACxBC,EADwB,KAgBtC,OAVAC,qBAAU,WACNxB,EAAQC,GACHwB,MAAK,SAAAd,GACFY,EAAS,CACLf,KAAKG,EACLU,SAAS,SAGvB,CAACpB,IAEIqB,EDZwBI,CAAazB,GAAhCa,EAFwB,EAE7BN,KAAaa,EAFgB,EAEhBA,QAEpB,OACI,qCACI,oBAAIJ,UAAU,oCAAd,SAAmDhB,IAClDoB,GAAW,mBAAGJ,UAAU,mCAAb,qBACZ,qBAAKA,UAAU,YAAf,SAEIH,EAAOJ,KAAI,SAAAC,GAAG,OACV,cAAC,EAAD,eAEQA,GADCA,EAAIC,aEd1B,SAASe,IAAgB,IAAD,EACSxC,mBAAS,CAAC,cADnB,mBACpByC,EADoB,KACR1C,EADQ,KAM3B,OACI,qCACI,gDACA,cAAC,EAAD,CAAaA,cAAeA,IAC5B,uBACA,6BAEQ0C,EAAWlB,KAAK,SAAAT,GAAQ,OACpB,cAAC,EAAD,CAEIA,SAAUA,GADLA,W,MCbjC4B,IAASC,OACN,cAACH,EAAD,IACAI,SAASC,eAAe,W","file":"static/js/main.8578ff79.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport PropTypes from 'prop-types'\n\n\nexport const AddCategory = ({setCategories}) => {\n    const [inputValue, setInputValue] = useState();\n\n    const handleInputChange = (e) => {\n        // console.log(e.target.value)\n        setInputValue(e.target.value)\n    }\n    const handleSubmit = (e) =>{\n        e.preventDefault();\n        // console.log('submit boton')\n        if(inputValue.trim().length>2){ \n            setCategories(cats => [inputValue,...cats]);\n            setInputValue('');\n        }\n    }\n    return (\n        <form onSubmit={handleSubmit}> \n            <input \n                type=\"text\"\n                value = {inputValue}\n                onChange={handleInputChange}\n            />\n        </form>\n    )\n} \nAddCategory.propTypes = {\n    setCategories: PropTypes.func.isRequired\n}\n\n ","export const getGifs = async(category) =>{\n    const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(category)}&limit=10&api_key=IE6MCDnjJe5sjaocgCYvCwlM5D6gSfbl`;\n    const resp = await fetch(url);\n    const {data} = await resp.json();\n    const gifs = data.map(img =>{ \n        return {\n            id: img.id,\n            title: img.title,\n            url: img.images?.downsized_medium.url\n        }\n    })\n    // console.log(gifs)\n    // setImages(gifs);\n    return gifs;\n}","import React from 'react'\n\nexport const GifGridItem = ({title,url}) => {\n    // console.log(id,title,url)\n    return (\n        <div className=\"card animate__animated animate__fadeIn\">\n            <img src={url} alt={title}></img>\n            <p>{title}</p>\n        </div>\n    )\n}\n","import React from 'react'\nimport { useFetchGifs } from '../hooks/useFetchGifs'\n \nimport { GifGridItem } from './GifGridItem';\n\nexport const GrifGrid = ({category}) => {   \n\n    const {data:images, loading} = useFetchGifs(category); \n\n    return (\n        <>\n            <h3 className=\"animate__animated animate__fadeIn\">{category}</h3>  \n            {loading && <p className=\"animate__animated animate__flash\">Loading</p>}\n            <div className=\"card-grid\"> \n            {\n                images.map(img => ( \n                    <GifGridItem \n                        key={img.id}\n                        {...img} /> \n                ))\n            } \n            </div>\n        </>\n    )\n}\n","import { useState,useEffect } from 'react'\nimport {getGifs} from '../helpers/getGifs';\n\nexport const useFetchGifs = (category) => {\n    const [state, setState] = useState({\n        data: [],\n        loading: true\n    });\n\n    useEffect(()=>{\n        getGifs(category)\n            .then(img => {\n                setState({\n                    data:img,\n                    loading: false\n                })\n            })\n    },[category]) \n\n    return state;\n}\n","import React, { useState } from 'react' \nimport { AddCategory } from './Components/AddCategory'\nimport { GrifGrid } from './Components/GrifGrid'\nexport function GifExpertApp() {  \n    const [categories, setCategories] = useState(['One Punch'])\n    // const handleAdd = () =>{ \n    //     // setCategories([...categories,'HunterXHunter']);\n    //     setCategories(cats => [...cats,'HunterXHunter']);\n    // }\n    return (\n        <>\n            <h2>Gif Expert App</h2>\n            <AddCategory setCategories={setCategories}/>   \n            <hr/> \n            <ol>\n                {\n                    categories.map( category  => \n                        <GrifGrid \n                            key={category}\n                            category={category}\n                        />\n                    )\n                }\n            </ol>\n        </>\n    )\n} ","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {GifExpertApp} from './GifExpertApp';\nimport './index.css';\n\nReactDOM.render(\n   <GifExpertApp />,\n   document.getElementById('root')\n); "],"sourceRoot":""}